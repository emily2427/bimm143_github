---
title: "Class 13: RNA Sequence Analysis"
author: "Emily Chen (PID: A16925878)"
format: pdf
---

#Background
Today we will analyze some RNA Sequencing data on the effect of a common steroid drug on airway cell lines.

There are two inputs we need for this analysis:

-`countData`: counts for the genes in rows with experiment in the columns
-`colData`: or metadata that tells is about the design of the experiment (i.e what is in the column of `countData` )

#Import countData and colData
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```
For the counts data we have to write the code `row.names=1` because in that data set there are r column so we have to write that code so that we "omit" the first column since that column is juust the index

> Q1. How many genes are in this data?

```{r}
nrow(counts)
```
There are 38,694 genes in this data

> Q2. How many ‘control’ cell lines do we have?

```{r}
metadata
```
```{r}
metadata$dex
table(metadata$dex)
```

```{r}
sum(metadata$dex=="control")
```

There are 4 control cell lines in the data set

# Toy differential gene expression

Lets try finding the average or mean of the "control" and "treated" columns and see if they differ

- First we need to find all "control" columns
- Extract just the "control" values for each gene
- Calculate the `mean()` for each gene "control" values

```{r}
all(colnames(counts) == metadata$id)
```

the $dex column tells me whether we have "control" or "treated"

```{r}
control.inds <- metadata$dex== "control"
```

Extracted just the "control" values for all genes
```{r}
control.counts <- counts[,control.inds]
```


```{r}
head(control.counts)
```


>.Q3 .Calculate the mean value for each gene in the "control" genes

```{r}
control.mean <-rowMeans(control.counts)
```
> Q4. Do the same for "treated to get a `treated

```{r}
treated.inds <- metadata$dex== "treated"
```

Extracted just the "treated" values for all genes
```{r}
treated.counts <- counts[,treated.inds]
```

```{r}
treated.mean <-rowMeans(treated.counts)
```


> Q5. Make a plot of `control.mean` vs `treated.mean`

```{r}
meancounts<- data.frame(control.mean, treated.mean)
library(ggplot2)
ggplot(meancounts)+
  aes(control.mean, treated.mean)+ 
  geom_point(alpha=0.3)
```


>Q6. Try plotting both axes on a log scale.

```{r}
meancounts<- data.frame(control.mean, treated.mean)
library(ggplot2)
ggplot(meancounts)+
  aes(control.mean, treated.mean)+ 
  geom_point(alpha=0.3)+
  scale_x_log10()+
  scale_y_log10()
```

A common "rule-of-thumb" is to focus on genes with a log2 "fold-change" of +2 as so called UP REGULATED and -2 as DOWN REGULATED. 

```{r}
log2(80/20)
```

Let's do a log2 fold-change value to our "meancounts data.frame"

```{r}
meancounts$log2c<- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```
The negative values in the log2c column mean that those are down regulated.

> Q7. Remove any "zero count" genes from our dataset for further anlaysis

```{r}
to.keep <-rowSums(meancounts[,1:2]==0)==0
sum(to.keep)
```
```{r}
mycounts <- meancounts[to.keep,]
head(mycounts)
```

> Q8. How many genes are "up" regulated at a log2fc threshold of +2?

```{r}
sum(mycounts$log2c >=2)
```
There are 314 genes are are up regulated

> Q9. How many genes are "down" regulated at a log2fc threshold of -2?

```{r}
sum(mycounts$log2c <=-2)
```
> Q10. Do you trust these results? Why or why not?

We do not trust these results as we are missing some stats

#DESeq2 analysis

Let's do this properly and consider the stats- are the differences in the mean significant?

We will use DESeq2 to do this:

```{r, message=FALSE}
library(DESeq2)
```

The first function we will use from this package sets up the input in the particular format that DESeq wants:

```{r}
dds<- DESeqDataSetFromMatrix(countData= counts,
                       colData=metadata,
                       design=~dex)
```

We can now run our DESeq analysis

```{r}
dds<- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

# Result Figure: Volcano Plots

Plot of Log2FC vs P-value

```{r}
plot(res$log2FoldChange, res$padj)
```
If we are on the left side of the zero, hence a negative value, that means we are downregulated, and then on the opposite side foe the zero, we have upregulations.

This P-value data is again heavily skewed, so let's log transform it
```{r}
plot(res$log2FoldChange, log(res$padj))
```
We can flip the y-axis by adding a minus sign. This iwll make it easier to interpret

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="blue")
abline(v=+2, col="purple")
abline(h=-log(0.05), col="green")
```

Lets add some color.

```{r}
mycols<- rep("grey", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >=2] <- "purple"
mycols[res$padj >=0.005] <- "grey"
plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=-2, col="blue")
abline(v=+2, col="purple")
abline(h=-log(0.05), col="green")
```
```{r}
ggplot(as.data.frame(res))+
  aes(log2FoldChange, -log(padj))+
  geom_point(color=mycols)+
  geom_vline(xintercept = -2, color= "blue")+
  geom_vline(xintercept = 2, color= "purple")+
  geom_hline(yintercept=-log(0.005), col="green")+
  labs(x = "Log2 Fold Change",
       y = "-Log(Adjusted P-Value)")+
  theme_bw()
```

## May 15, 2025 Class

We first need to add gene symbols (e.g HBB, etc) so we know what genes we are dealing with. We need to "trnalsate" between ENSEMBLE ids that we have in the rownmanes of `res`

```{r}
head(rownames(res))
```

Install from bioconductor with `BiocManager::install("AnnotationDbi")`
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```
Whar different database ID types can I translate between
```{r}
columns(org.Hs.eg.db)
```

Lets "map" between "ENSEMBL" and "SYMBOL" (i.e gene symbol)
```{r}
res$symbol<- mapIds(x=org.Hs.eg.db,
             keys = rownames(res),
             keytype = "ENSEMBL",
             column="SYMBOL")
head(res)
```

Add a few more ID mappings including "GENENAME" and "ENTREZID"

```{r}
res$name<- mapIds(x=org.Hs.eg.db,
             keys = rownames(res),
             keytype = "ENSEMBL",
             column="GENENAME")

res$entrez<- mapIds(x=org.Hs.eg.db,
             keys = rownames(res),
             keytype = "ENSEMBL",
             column="ENTREZID")
head(res)
```
Be sure to save our annotated results to a file. 

```{r}
write.csv(res, file="my_annotated_results.csv")
```


# Pathway Analysis 

Install the packages we need for pathway analysis: run in your R console (i.e not in quarto doc)
`BiocManager::install(c("pathview", "gage", "gageData"))`. we wrote the code `message=FALSE` so we cna stop gettign that messgae when we load the packaged from the library.

```{r, message=FALSE}
library(gage)
library(gageData)
library(pathview)
```

Let's peak at the gageData
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

To run pathway analysis we will use the `gage()` function and it requires a wee vector of "importance". We will use our Log2FC results from our `res` object

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres <- gage(foldchanges, gsets=kegg.sets.hs)
```

What is in the result `keggres` object
```{r}
attributes(keggres)
```
```{r}
head(keggres$less)
```

We can pass our foldchanges vectors (our results) together with any of these

```{r}
pathview(gene.data = foldchanges, pathway.id = "hsa05310")
```

![The Asthma pathway overlaps with our differntially expressed genes](hsa05310.pathview.png)



